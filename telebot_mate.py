#GigaChat
from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat



from telebot.async_telebot import AsyncTeleBot
import telebot
import requests
from telebot import types
import asyncio

#from gigachat import GigaChat
#from gigachat.models import Chat, Messages, MessagesRole



bot = AsyncTeleBot('')
cnt_tokens = 350

giga = GigaChat(credentials='', scope='GIGACHAT_API_PERS', verify_ssl_certs=False, max_tokens=cnt_tokens)

expert_promt_tim = '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—ã'
expert_promt_gig = '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ —É–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º'
expert_promt_kot = '–¢—ã —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã'



tim_messages = [
  SystemMessage(
    content=expert_promt_tim
  )
]

gig_messages = [
  SystemMessage(
    content=expert_promt_gig
  )
]

kot_messages = [
  SystemMessage(
    content=expert_promt_kot
  )
]

messages_history = []
bot_name = 'Bot'

def answer(topic, messages, bot_name):
    messages.append(HumanMessage(content=topic))
    res = giga(messages)
    messages.append(res)

    return bot_name + ':' + res.content




@bot.message_handler(commands=['start'])
async def start2(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    await bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫! –Ø –ø–æ–º–æ–≥—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º", reply_markup=markup)



@bot.message_handler(content_types='text')
async def get_text_messages(message: types.Message):

    global messages_history, bot_name
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) 
        btn1 = types.KeyboardButton('–¢–∏–º:–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π')
        btn2 = types.KeyboardButton('–ì–∏–≥:–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥')
        btn3 = types.KeyboardButton('–ö–æ—Ç:–ò–∑—É—á–∏—Ç—å —Ç–µ–º—ã')
        markup.add(btn1, btn2, btn3)
        await bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–∏ —Ä–∞–∑–¥–µ–ª –∏ –∑–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '–¢–∏–º:–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π':
        bot_name = '–¢–∏–º'
        messages_history = tim_messages
        await bot.send_message(message.from_user.id, answer( topic = message.text, messages = messages_history, bot_name = bot_name), parse_mode='Markdown')

    elif message.text == '–ì–∏–≥:–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥':
        bot_name = '–ì–∏–≥'
        messages_history = gig_messages
        await bot.send_message(message.from_user.id, answer( topic = message.text, messages = messages_history, bot_name = bot_name), parse_mode='Markdown')

    elif message.text == '–ö–æ—Ç:–ò–∑—É—á–∏—Ç—å —Ç–µ–º—ã':
        bot_name = '–ö–æ—Ç'
        messages_history = kot_messages
        await bot.send_message(message.from_user.id, answer( topic = message.text, messages = messages_history, bot_name = bot_name), parse_mode='Markdown')


    else: await bot.send_message(message.from_user.id, answer(topic = message.text, messages = messages_history, bot_name = bot_name), parse_mode='Markdown' )
   



asyncio.run(bot.polling())


